"""
Следующая повторяющаяся последовательность определена для множества натуральных чисел:

n → n/2 (n - четное)
n → 3n + 1 (n - нечетное)

Используя описанное выше правило и начиная с 13, сгенерируется следующая последовательность:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1

Получившаяся последовательность (начиная с 13 и заканчивая 1) содержит 10 элементов. Хотя это
до сих пор и не доказано (проблема Коллатца (Collatz)), предполагается, что все
сгенерированные таким образом последовательности оканчиваются на 1.

Какой начальный элемент меньше миллиона генерирует самую длинную последовательность?

Примечание: Следующие за первым элементы последовательности могут быть больше миллиона.

P.S. Задача решена 2.08.22г. (/researches/Collatz_conjecture/Collatz_conjecture.py)
в рамках самостоятельного исследования последовательности Коллатца, в следствие решения
какой-то задачи на данную тематику из курса Stepik "Адаптивный тренажер Python".
"""


import time

start = time.time()

lst = [0]

for n in range(1, 10_000_000):
    lst.append(1)
    while n > 1:
        n = n*3 + 1 if n % 2 else n // 2
        if n < len(lst):
            lst[-1] += lst[n]
            break
        lst[-1] += 1

print(f'Длина последовательности: {max(lst)}', f'Число: {lst.index(max(lst))}', sep='\n')

print(f'Время (сек.): {time.time() - start}')
